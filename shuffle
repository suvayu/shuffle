#!/usr/bin/env python

from argparse import ArgumentParser
from pathlib import Path
from typing import Dict, List

import pikepdf

layouts: Dict[int, List[int]] = {4: [1, 4, 5, 8, 3, 2, 7, 6]}

page_sizes = {
    "a0": (2384, 3370),
    "a1": (1684, 2384),
    "a2": (1190, 1684),
    "a3": (842, 1190),
    "a4": (595, 842),
    "a5": (420, 595),
    "a6": (298, 420),
    "a7": (210, 298),
    "a8": (148, 210),
    "b0": (2835, 4008),
    "b1": (2004, 2835),
    "b2": (1417, 2004),
    "b3": (1001, 1417),
    "b4": (709, 1001),
    "b5": (499, 709),
    "b6": (354, 499),
    "b7": (249, 354),
    "b8": (176, 249),
    "b9": (125, 176),
    "b10": (88, 125),
    "letter": (612, 792),
    "legal": (612, 1008),
}


parser = ArgumentParser()
parser.add_argument("inputpdf", help="Input PDF")
parser.add_argument(
    "--page-size",
    choices=page_sizes.keys(),
    required=True,
    help="Input PDF page size",
)
parser.add_argument(
    "--pages-per-side",
    type=int,
    choices=layouts.keys(),
    required=True,
    help="Number of pages per side",
)


def shuffle(inputpdf: str, size: str, layout: List[int]):
    inpath = Path(inputpdf)
    outpath = f"{inpath.stem}_reordered{inpath.suffix}"
    npages = len(layout)
    with pikepdf.open(inputpdf) as pdf:
        # pad with blank pages to make total number of pages a multiple of 8
        for i in range(npages - (len(pdf.pages) % npages)):
            pdf.add_blank_page(page_size=size)

        # reorder pages to match layout
        def _getitem(j: int):
            return lambda k: pdf.pages[k - 1 + j * npages]

        for i in range(len(pdf.pages) // npages):
            pdf.pages[i * npages : i * npages + npages] = list(
                map(_getitem(i), layout)
            )

        pdf.save(outpath)


if __name__ == "__main__":
    opts = parser.parse_args()
    shuffle(
        opts.inputpdf,
        page_sizes[opts.page_size],
        layouts[opts.pages_per_side],
    )
